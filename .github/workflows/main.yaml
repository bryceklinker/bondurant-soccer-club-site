name: Main
on: [push]
env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TERRAFORM_VERSION: 1.0.1
  GOOGLE_MEASUREMENT_ID: ${{ secrets.GOOGLE_MEASUREMENT_ID }}
  APP_INSIGHTS_KEY: ${{ secrets.APP_INSIGHTS_KEY }}
jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    env:
      ASSETS_PATH: ${{ github.workspace}}/src/assets
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - uses: actions/setup-node@v2
        name: Setup Node
        with:
          node-version: '14'

      - run: yarn install
        name: Install Dependencies

      - run: yarn test
        name: Run Unit Tests

      - run: ${{ github.workspace }}/scripts/optimize-images.sh
        name: Optimize Images

      - run: yarn e2e
        name: Run UI Tests

      - name: Upload Site Content
        uses: actions/upload-artifact@v3
        with:
          name: site_content
          path: ${{ github.workspace }}/dist/

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v5.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  deploy_dns:
    name: Deploy DNS
    runs-on: ubuntu-20.04
    environment: dns
    needs: [build]
    env:
      PLAN_PATH: ${{ github.workspace }}/infra/dns/dns.tfplan
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - run: ${{ github.workspace }}/scripts/install-terraform.sh
        name: Install Terraform

      - run: terraform init
        name: Initialize Terraform
        working-directory: ${{ github.workspace }}/infra/dns

      - run: terraform plan -out="${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/dns

      - run: terraform apply "${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/dns

  deploy_prod_site:
    name: Deploy Prod Site
    runs-on: ubuntu-20.04
    environment: prod
    needs: [deploy_dns]
    env:
      PLAN_PATH: ${{ github.workspace }}/infra/prod/prod.tfplan
      TARGET_ENV: prod
    steps:
      - uses: actions/checkout@v2
        name: Checkout

      - name: Download Site Content
        uses: actions/download-artifact@v3
        with:
          name: site_content
          path: ${{ github.workspace }}/dist/

      - run: ${{ github.workspace }}/scripts/install-terraform.sh
        name: Install Terraform

      - run: |
          terraform init
          dns_resource_group_name="$(terraform output -raw dns_resource_group_name)"
          dns_zone_name="$(terraform output -raw dns_zone_name)"
          
          echo "TF_VAR_dns_zone_name=${dns_zone_name} >> $GITHUB_ENV"
          echo "TF_VAR_dns_resource_group_name=${dns_resource_group_name} >> $GITHUB_ENV"
        name: Set DNS Variables
        working-directory: ${{ github.workspace }}/infra/dns

      - run: terraform init
        name: Initialize Terraform
        working-directory: ${{ github.workspace }}/infra/prod

      - run: terraform plan -out="${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/prod

      - run: terraform apply "${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/prod

      - run: ${{ github.workspace }}/scripts/purge-cdn.sh
        name: Purge CDN Content
