name: Main
on: [push]

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TERRAFORM_VERSION: 1.6.4-*
  APP_INSIGHTS_KEY: ${{ secrets.APP_INSIGHTS_KEY }}
  GOOGLE_AUTH_CLIENT_ID: ${{ secrets.GOOGLE_AUTH_CLIENT_ID }}
  GOOGLE_AUTH_CLIENT_SECRET: ${{ secrets.GOOGLE_AUTH_CLIENT_SECRET }}
  GOOGLE_AUTH_AUDIENCE: ${{ secrets.GOOGLE_AUTH_AUDIENCE }}
  GOOGLE_AUTH_AUTHORITY: ${{ secrets.GOOGLE_AUTH_AUTHORITY }}
  GOOGLE_AUTH_REFRESH_TOKEN: ${{ secrets.GOOGLE_AUTH_REFRESH_TOKEN }}
jobs:
  build:
    name: Build
    runs-on: ubuntu-22.04
    concurrency: build
    env:
      ASSETS_PATH: ${{ github.workspace}}/src/assets
    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - uses: actions/setup-node@v3
        name: Setup Node
        with:
          node-version: '20'
          cache: yarn

      - uses: actions/setup-dotnet@v3
        name: Setup Dotnet
        with:
          global-json-file: packages/backend/global.json

      - run: ${{ github.workspace }}/scripts/install-dependencies.sh
        name: Install Dependencies

      - run: yarn test
        name: Run Unit Tests

      - run: ${{ github.workspace }}/scripts/write-function-app-settings.sh
        name: Write Function App Settings
        env:
          GOOGLE_AUTH_AUDIENCE: ${{ env.GOOGLE_AUTH_AUDIENCE }}
          GOOGLE_AUTH_AUTHORITY: ${{ env.GOOGLE_AUTH_AUTHORITY }}

      - run: yarn e2e
        name: Run E2E Tests
        env:
          CYPRESS_GOOGLE_AUTH_CLIENT_ID: ${{ env.GOOGLE_AUTH_CLIENT_ID }}
          CYPRESS_GOOGLE_AUTH_CLIENT_SECRET: ${{ env.GOOGLE_AUTH_CLIENT_SECRET }}
          CYPRESS_GOOGLE_AUTH_REFRESH_TOKEN: ${{ env.GOOGLE_AUTH_REFRESH_TOKEN }}

      - name: Bump version and push tag
        id: tag_version
        if: github.ref == 'refs/heads/main'
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a GitHub release
        if: github.ref == 'refs/heads/main'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

  deploy_dns:
    name: Deploy DNS
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    environment: dns
    concurrency: dns
    needs: [build]
    env:
      PLAN_PATH: ${{ github.workspace }}/infra/dns/dns.tfplan
    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - run: ${{ github.workspace }}/scripts/install-terraform.sh
        name: Install Terraform

      - run: terraform init
        name: Initialize Terraform
        working-directory: ${{ github.workspace }}/infra/dns

      - run: terraform plan -out="${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/dns

      - run: terraform apply "${PLAN_PATH}"
        name: Apply Terraform
        working-directory: ${{ github.workspace }}/infra/dns

  deploy_dev_site:
    name: Deploy Dev Site
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    concurrency: dev
    environment:
      name: dev
      url: ${{ env.SITE_URL }}
    needs: [ deploy_dns ]
    env:
      PLAN_PATH: ${{ github.workspace }}/infra/dev/dev.tfplan
      TARGET_ENV: dev
      SITE_URL: https://dev.bondurantsoccerclub.com
    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - uses: actions/setup-node@v3
        name: Setup Node
        with:
          node-version: '20'
          cache: yarn

      - uses: actions/setup-dotnet@v3
        name: Setup Dotnet
        with:
          global-json-file: packages/backend/global.json

      - run: yarn install
        name: Install Dependencies

      - run: yarn build
        name: Build Dev Site
        env:
          GOOGLE_AUTH_CLIENT_ID: ${{ secrets.GOOGLE_AUTH_CLIENT_ID }}

      - run: ${{ github.workspace }}/scripts/register-azure-features.sh
        name: Register Azure Features

      - run: ${{ github.workspace }}/scripts/install-terraform.sh
        name: Install Terraform

      - run: |
          terraform init
          dns_resource_group_name="$(terraform output -raw dns_resource_group_name)"
          dns_zone_name="$(terraform output -raw dns_zone_name)"

          echo "TF_VAR_dns_zone_name=${dns_zone_name}" >> $GITHUB_ENV
          echo "TF_VAR_dns_resource_group_name=${dns_resource_group_name}" >> $GITHUB_ENV
        name: Set DNS Variables
        working-directory: ${{ github.workspace }}/infra/dns

      - run: |
          echo "TF_VAR_google_client_id=${GOOGLE_AUTH_CLIENT_ID}" >> $GITHUB_ENV
          echo "TF_VAR_google_client_secret=${GOOGLE_AUTH_CLIENT_SECRET}" >> $GITHUB_ENV
        name: Setup Terraform Variables

      - run: terraform init
        name: Initialize Terraform
        working-directory: ${{ github.workspace }}/infra/dev

      - run: terraform plan -out="${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/dev

      - run: terraform apply "${PLAN_PATH}"
        name: Apply Terraform
        working-directory: ${{ github.workspace }}/infra/dev

      - run: ${{ github.workspace }}/scripts/deploy-backend.sh
        name: Deploy Backend

      - run: ${{ github.workspace }}/scripts/purge-cdn.sh
        name: Purge CDN Content

      - name: Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ env.SITE_URL }}/
            ${{ env.SITE_URL }}/volunteer
            ${{ env.SITE_URL }}/contact-us
            ${{ env.SITE_URL }}/locations
            ${{ env.SITE_URL }}/schedules
          uploadArtifacts: true
          temporaryPublicStorage: true

  deploy_prod_site:
    name: Deploy Prod Site
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-22.04
    concurrency: prod
    environment:
      name: prod
      url: ${{ env.SITE_URL }}
    needs: [deploy_dev_site]
    env:
      PLAN_PATH: ${{ github.workspace }}/infra/prod/prod.tfplan
      TARGET_ENV: prod
      SITE_URL: https://www.bondurantsoccerclub.com
      GOOGLE_MEASUREMENT_ID: ${{ secrets.PROD_GOOGLE_MEASUREMENT_ID }}
      GOOGLE_TAG_MANAGER_ID: ${{ secrets.PROD_GOOGLE_TAG_MANAGER_ID }}
      GOOGLE_AUTH_CLIENT_ID: ${{ secrets.GOOGLE_AUTH_CLIENT_ID }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - uses: actions/setup-node@v3
        name: Setup Node
        with:
          node-version: '20'
          cache: yarn

      - uses: actions/setup-dotnet@v3
        name: Setup Dotnet
        with:
          global-json-file: packages/backend/global.json

      - run: yarn install
        name: Install Dependencies

      - run: yarn build
        name: Build Prod Site

      - run: ${{ github.workspace }}/scripts/install-terraform.sh
        name: Install Terraform

      - run: |
          terraform init
          dns_resource_group_name="$(terraform output -raw dns_resource_group_name)"
          dns_zone_name="$(terraform output -raw dns_zone_name)"
          
          echo "TF_VAR_dns_zone_name=${dns_zone_name}" >> $GITHUB_ENV
          echo "TF_VAR_dns_resource_group_name=${dns_resource_group_name}" >> $GITHUB_ENV
        name: Set DNS Variables
        working-directory: ${{ github.workspace }}/infra/dns

      - run: |
          echo "TF_VAR_google_client_id=${GOOGLE_AUTH_CLIENT_ID}" >> $GITHUB_ENV
          echo "TF_VAR_google_client_secret=${GOOGLE_AUTH_CLIENT_SECRET}" >> $GITHUB_ENV
        name: Setup Terraform Variables

      - run: terraform init
        name: Initialize Terraform
        working-directory: ${{ github.workspace }}/infra/prod

      - run: terraform plan -out="${PLAN_PATH}"
        name: Create Plan Terraform
        working-directory: ${{ github.workspace }}/infra/prod

      - run: terraform apply "${PLAN_PATH}"
        name: Apply Terraform
        working-directory: ${{ github.workspace }}/infra/prod

      - run: ${{ github.workspace }}/scripts/deploy-backend.sh
        name: Deploy Backend

      - run: ${{ github.workspace }}/scripts/purge-cdn.sh
        name: Purge CDN Content

      - name: Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            ${{ env.SITE_URL }}/
            ${{ env.SITE_URL }}/volunteer
            ${{ env.SITE_URL }}/contact-us
            ${{ env.SITE_URL }}/locations
            ${{ env.SITE_URL }}/schedules
          uploadArtifacts: true
          temporaryPublicStorage: true
